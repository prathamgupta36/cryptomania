#!/usr/bin/exec-suid -- /usr/bin/python3

import os
import time
import random
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt
from rich.text import Text
import pyfiglet
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from termcolor import colored
import hashlib

def display_art(text, font='block', fill_char='â–ˆ'):
    raw = pyfiglet.figlet_format(text, font=font)
    solid = "".join(fill_char if c not in (" ", "\n") else c for c in raw)
    return solid

def load_flag():
    return Path('/flag').read_text().strip()

def shuffle_reveal(console: Console, flag: str, colors: dict):
    panel = Panel(Text("Decoding flag...", style=f"bold {colors['primary']}"),
                  border_style=colors['secondary'])
    console.print(panel)
    time.sleep(0.75)

    revealed = ['_'] * len(flag)
    for i, ch in enumerate(flag):
        if ch in '{}_':
            revealed[i] = ch
            console.print("".join(revealed), end="\r")
            time.sleep(0.08)
            continue

        for _ in range(10):
            revealed[i] = random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789')
            console.print("".join(revealed), end="\r")
            time.sleep(0.02)
            
        revealed[i] = ch
        console.print("".join(revealed), end="\r")
        time.sleep(0.05)

    console.print("\n")
    return "".join(revealed)

def main():
    console = Console()
    colors = {
        'primary': 'magenta',
        'secondary': 'bright_magenta'
    }

    title = display_art('Blueprint')
    console.print(title, style="bold blue")
    console.print(
        Panel("[bold]Project Argus: Cryptographic Construct Activation[/bold]",
              title="[cyan]STATUS[/cyan]",
              subtitle="[cyan]ONLINE[/cyan]",
              border_style="blue")
    )

    key = os.urandom(16)
    message = bytes.fromhex(hashlib.sha256(open("/flag", "rb").read().strip()).digest().hex())[:32]
    iv = bytes(16)

    cipher = Cipher(algorithms.AES(key), modes.CBC(iv))
    encryptor = cipher.encryptor()
    ciphertext = encryptor.update(message) + encryptor.finalize()
    correct_tag = ciphertext[-16:]

    challenge_text = Text.from_markup(
        f"""
Welcome, Engineer.

Your task is to compute the AES-CBC-MAC of a given message.

[bold]Construct ID:[/bold] AES-CBC-MAC
[bold]Key:[/bold] {key.hex()}
[bold]Message:[/bold] {message}

Your goal is to compute the correct 16-byte tag for this message.
"""
    )
    console.print(Panel(challenge_text, title="[bold blue]Authentication Challenge[/bold blue]", border_style="blue", padding=(1, 2)))

    submitted_tag_hex = Prompt.ask("[bold green]Please input the tag (in hex)[/bold green]")

    try:
        submitted_tag = bytes.fromhex(submitted_tag_hex)
        if submitted_tag == correct_tag:
            console.print(Panel(Text.from_markup("[bold green]AUTHENTICATION SUCCESSFUL[/bold green]\n\n" 
                                                "The message has been authenticated.\n\n" 
                                                "[bold]Flag:[/bold]"),
                                title="[bold green]STATUS: SUCCESS[/bold green]", border_style="green")
            )
            flag = load_flag()
            final_flag = shuffle_reveal(console, flag, colors)
            console.print(Panel(f"[bold]Final Flag:[/bold] {final_flag}", border_style="green")
            )
        else:
            failure_text = Text.from_markup(f"""
[bold red]AUTHENTICATION FAILED[/bold red]

Submitted Tag: {submitted_tag.hex()}
Correct Tag:   {correct_tag.hex()}

The tag is incorrect.
"""
            )
            console.print(Panel(failure_text, title="[bold red]STATUS: FAILURE[/bold red]", border_style="red")
            )

    except ValueError:
        console.print(Panel("[bold red]Invalid hex input.[/bold red]", title="[bold red]INPUT ERROR[/bold red]", border_style="red")
        )

if __name__ == "__main__":
    main()
