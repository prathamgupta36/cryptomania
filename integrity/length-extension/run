#!/usr/bin/exec-suid -- /usr/bin/python3

import os
import time
import random
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt
from rich.text import Text
import pyfiglet
import hashlib
from termcolor import colored
import struct

def display_art(text, font='block', fill_char='â–ˆ'):
    raw = pyfiglet.figlet_format(text, font=font)
    solid = "".join(fill_char if c not in (" ", "\n") else c for c in raw)
    return solid

def load_flag():
    return Path('/flag').read_text().strip()

def shuffle_reveal(console: Console, flag: str, colors: dict):
    panel = Panel(Text("Decoding flag...", style=f"bold {colors['primary']}"),
                  border_style=colors['secondary'])
    console.print(panel)
    time.sleep(0.75)

    revealed = ['_'] * len(flag)
    for i, ch in enumerate(flag):
        if ch in '{}_':
            revealed[i] = ch
            console.print("".join(revealed), end="\r")
            time.sleep(0.08)
            continue

        for _ in range(10):
            revealed[i] = random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789')
            console.print("".join(revealed), end="\r")
            time.sleep(0.05)
            
        revealed[i] = ch
        console.print("".join(revealed), end="\r")
        time.sleep(0.05)

    console.print("\n")
    return "".join(revealed)

def main():
    console = Console()
    colors = {
        'primary': 'magenta',
        'secondary': 'bright_magenta'
    }

    title = display_art('Blueprint')
    console.print(title, style="bold blue")
    console.print(
        Panel("[bold]Project Argus: Cryptographic Construct Activation[/bold]",
              title="[cyan]STATUS[/cyan]",
              subtitle="[cyan]ONLINE[/cyan]",
              border_style="blue")
    )

    secret_message = os.urandom(55)
    new_message = (hashlib.sha256(open("/flag", "rb").read().strip()).hexdigest()).encode()
    original_hash = hashlib.sha256(secret_message).hexdigest()

    original_len_bits = len(secret_message) * 8
    zero_padding_bits = (448 - ((original_len_bits + 8) % 512)) % 512
    zero_padding_bytes = zero_padding_bits // 8

    padding = b'\x80' + b'\x00' * zero_padding_bytes + struct.pack('>Q', original_len_bits)
    extended_message = secret_message + padding + new_message
    correct_extended_hash = hashlib.sha256(extended_message).hexdigest()


    challenge_text = Text.from_markup(
        f"""
Welcome, Cryptologist.

We have intercepted a message with a weak authentication mechanism. Your task is to perform a length extension attack.

[bold]Construct ID:[/bold] SHA256-LENGTH-EXTENSION
[bold]Original Hash (SHA256):[/bold] {original_hash}
[bold]Original Message Length:[/bold] 55 bytes
[bold]Appended Message:[/bold] {new_message}

Your goal is to compute the hash of the original message concatenated with padding and the appended message, without knowing the original message.
"""
    )
    console.print(Panel(challenge_text, title="[bold blue]Attack Scenario[/bold blue]", border_style="blue", padding=(1, 2)))

    submitted_hash = Prompt.ask("[bold green]Please input the extended hash[/bold green]")

    if submitted_hash.strip() == correct_extended_hash:
        console.print(Panel(Text.from_markup("[bold green]ATTACK SUCCESSFUL[/bold green]\n\n" 
                                            "The authentication has been bypassed.\n\n" 
                                            "[bold]Flag:[/bold]"),
                            title="[bold green]STATUS: SUCCESS[/bold green]", border_style="green"))
        flag = load_flag()
        final_flag = shuffle_reveal(console, flag, colors)
        console.print(Panel(f"[bold]Final Flag:[/bold] {final_flag}", border_style="green"))
    else:
        failure_text = Text.from_markup(
f"""
[bold red]ATTACK FAILED[/bold red]

Submitted Hash: {submitted_hash}
Correct Hash: {correct_extended_hash}

The authentication remains secure.
"""
        )
        console.print(Panel(failure_text, title="[bold red]STATUS: FAILURE[/bold red]", border_style="red"))

if __name__ == "__main__":
    main()