#!/usr/bin/exec-suid -- /usr/bin/python3

import os
import time
import random
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt
from rich.text import Text
import pyfiglet
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from termcolor import colored

def display_art(text, font='block', fill_char='â–ˆ'):
    raw = pyfiglet.figlet_format(text, font=font)
    solid = "".join(fill_char if c not in (" ", "\n") else c for c in raw)
    return solid

def load_flag():
    return Path('/flag').read_text().strip()

def shuffle_reveal(console: Console, flag: str, colors: dict):
    panel = Panel(Text("Decoding flag...", style=f"bold {colors['primary']}"),
                  border_style=colors['secondary'])
    console.print(panel)
    time.sleep(0.75)

    revealed = ['_'] * len(flag)
    for i, ch in enumerate(flag):
        if ch in '{}_':
            revealed[i] = ch
            console.print("".join(revealed), end="\r")
            time.sleep(0.08)
            continue

        for _ in range(10):
            revealed[i] = random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789')
            console.print("".join(revealed), end="\r")
            time.sleep(0.05)
            
        revealed[i] = ch
        console.print("".join(revealed), end="\r")
        time.sleep(0.05)

    console.print("\n")
    return "".join(revealed)

def get_tag(key, iv, message):
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv))
    encryptor = cipher.encryptor()
    padded_message = message + (16 - len(message) % 16) * bytes([16 - len(message) % 16])
    ciphertext = encryptor.update(padded_message) + encryptor.finalize()
    return ciphertext[-16:]

def main():
    console = Console()
    colors = {
        'primary': 'magenta',
        'secondary': 'bright_magenta'
    }

    title = display_art('Blueprint')
    console.print(title, style="bold blue")
    console.print(
        Panel("[bold]Project Argus: Cryptographic Construct Activation[/bold]",
              title="[cyan]STATUS[/cyan]",
              subtitle="[cyan]ONLINE[/cyan]",
              border_style="blue")
    )

    key = os.urandom(16)
    iv = bytes(16)
    message0 = os.urandom(16)
    message1 = os.urandom(16)
    tag0 = get_tag(key, iv, message0)
    tag1 = get_tag(key, iv, message1)

    challenge_text = Text.from_markup(
        f"""
Welcome, Engineer.

Your task is to exploit a weakness in AES-CBC-MAC to forge a tag for a new message.

[bold]Construct ID:[/bold] AES-CBC-MAC-LENGTH-EXTENSION

[bold]Message 0:[/bold] {message0.hex()}
[bold]Tag 0:[/bold] {tag0.hex()}

[bold]Message 1:[/bold] {message1.hex()}
[bold]Tag 1:[/bold] {tag1.hex()}

Your goal is to create a new message and a valid tag for it.
"""
    )
    console.print(Panel(challenge_text, title="[bold blue]Forgery Challenge[/bold blue]", border_style="blue", padding=(1, 2)))

    submitted_message_hex = Prompt.ask("[bold green]Please input the new message (in hex)[/bold green]")
    submitted_tag_hex = Prompt.ask("[bold green]Please input the new tag (in hex)[/bold green]")

    try:
        submitted_message = bytes.fromhex(submitted_message_hex)
        submitted_tag = bytes.fromhex(submitted_tag_hex)

        if submitted_message == message0 or submitted_message == message1:
            console.print(Panel("[bold red]You must submit a new message![/bold red]", title="[bold red]INPUT ERROR[/bold red]", border_style="red"))
            return

        computed_tag = get_tag(key, iv, submitted_message)
        if computed_tag == submitted_tag:
            console.print(Panel(Text.from_markup("[bold green]FORGERY SUCCESSFUL[/bold green]\n\n" 
                                                "The tag has been successfully forged.\n\n" 
                                                "[bold]Flag:[/bold]"),
                                title="[bold green]STATUS: SUCCESS[/bold green]", border_style="green"))
            flag = load_flag()
            final_flag = shuffle_reveal(console, flag, colors)
            console.print(Panel(f"[bold]Final Flag:[/bold] {final_flag}", border_style="green"))
        else:
            failure_text = Text.from_markup(f"""
[bold red]FORGERY FAILED[/bold red]

Your new tag: {submitted_tag.hex()}
Computed tag: {computed_tag.hex()}

The tags do not match.
""")
            console.print(Panel(failure_text, title="[bold red]STATUS: FAILURE[/bold red]", border_style="red"))

    except ValueError:
        console.print(Panel("[bold red]Invalid hex input.[/bold red]", title="[bold red]INPUT ERROR[/bold red]", border_style="red"))

if __name__ == "__main__":
    main()
